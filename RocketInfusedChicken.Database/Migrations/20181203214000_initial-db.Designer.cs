// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RocketInfusedChicken.Database;

namespace RocketInfusedChicken.Database.Migrations
{
    [DbContext(typeof(RocketInfusedChickenContext))]
    [Migration("20181203214000_initial-db")]
    partial class initialdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardTypeText")
                        .HasMaxLength(255);

                    b.Property<int>("ConvertedManaCost");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255);

                    b.Property<string>("Layout")
                        .HasMaxLength(25);

                    b.Property<string>("ManaCost")
                        .HasMaxLength(50);

                    b.Property<int>("MultiverseId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int>("Power");

                    b.Property<string>("Rarity")
                        .HasMaxLength(15);

                    b.Property<string>("Text")
                        .HasMaxLength(1000);

                    b.Property<int>("Toughness");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new { Id = 1, ConvertedManaCost = 0, MultiverseId = 1000, Name = "Alex Rocks", Power = 0, Toughness = 0 },
                        new { Id = 2, ConvertedManaCost = 0, MultiverseId = 666, Name = "Sammer Smells", Power = 0, Toughness = 0 }
                    );
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.CardColor", b =>
                {
                    b.Property<int>("CardId");

                    b.Property<int>("ColorId");

                    b.HasKey("CardId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("CardColors");
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.CardSpellSubType", b =>
                {
                    b.Property<int>("CardId");

                    b.Property<int>("SpellSubTypeId");

                    b.HasKey("CardId", "SpellSubTypeId");

                    b.HasIndex("SpellSubTypeId");

                    b.ToTable("CardSpellSubTypes");

                    b.HasData(
                        new { CardId = 1, SpellSubTypeId = 2 },
                        new { CardId = 1, SpellSubTypeId = 5 },
                        new { CardId = 1, SpellSubTypeId = 4 }
                    );
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.CardSpellSuperType", b =>
                {
                    b.Property<int>("CardId");

                    b.Property<int>("SpellSuperTypeId");

                    b.HasKey("CardId", "SpellSuperTypeId");

                    b.HasIndex("SpellSuperTypeId");

                    b.ToTable("CardSpellSuperTypes");

                    b.HasData(
                        new { CardId = 1, SpellSuperTypeId = 2 }
                    );
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.CardSpellType", b =>
                {
                    b.Property<int>("CardId");

                    b.Property<int>("SpellTypeId");

                    b.HasKey("CardId", "SpellTypeId");

                    b.HasIndex("SpellTypeId");

                    b.ToTable("CardSpellTypes");

                    b.HasData(
                        new { CardId = 1, SpellTypeId = 2 },
                        new { CardId = 1, SpellTypeId = 3 },
                        new { CardId = 2, SpellTypeId = 2 },
                        new { CardId = 2, SpellTypeId = 1 }
                    );
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(25);

                    b.Property<string>("ShortCode")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new { Id = 1, Name = "White", ShortCode = "W" },
                        new { Id = 2, Name = "Black", ShortCode = "B" },
                        new { Id = 3, Name = "Blue", ShortCode = "U" },
                        new { Id = 4, Name = "Green", ShortCode = "G" },
                        new { Id = 5, Name = "Red", ShortCode = "R" }
                    );
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.Draft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SetId");

                    b.HasKey("Id");

                    b.ToTable("Drafts");
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.DraftPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DraftId");

                    b.Property<int>("PlayerId");

                    b.HasKey("Id");

                    b.ToTable("DraftPlayers");
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DraftId");

                    b.Property<int>("SetId");

                    b.HasKey("Id");

                    b.ToTable("Packs");
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.Printing", b =>
                {
                    b.Property<int>("CardId");

                    b.Property<int>("SetId");

                    b.HasKey("CardId", "SetId");

                    b.HasIndex("SetId");

                    b.ToTable("Printings");

                    b.HasData(
                        new { CardId = 1, SetId = 33 },
                        new { CardId = 2, SetId = 33 },
                        new { CardId = 1, SetId = 51 }
                    );
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Block")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("SetType")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Sets");

                    b.HasData(
                        new { Id = 33, Code = "GOS", Name = "Guilds of Shropshire", ReleaseDate = new DateTime(2018, 12, 3, 21, 39, 59, 546, DateTimeKind.Local) },
                        new { Id = 51, Code = "INS", Name = "Innastruggle", ReleaseDate = new DateTime(2017, 5, 3, 21, 39, 59, 548, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.SpellSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("SpellSubTypes");

                    b.HasData(
                        new { Id = 1, Name = "Angel" },
                        new { Id = 2, Name = "Vampire" },
                        new { Id = 3, Name = "Zombie" },
                        new { Id = 4, Name = "Wizard" },
                        new { Id = 5, Name = "Human" }
                    );
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.SpellSuperType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("SpellSuperTypes");

                    b.HasData(
                        new { Id = 1, Name = "Basic" },
                        new { Id = 2, Name = "Legendary" },
                        new { Id = 3, Name = "Ongoing" },
                        new { Id = 4, Name = "Snow" },
                        new { Id = 5, Name = "World" }
                    );
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.SpellType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("SpellTypes");

                    b.HasData(
                        new { Id = 1, Name = "Artifact" },
                        new { Id = 2, Name = "Creature" },
                        new { Id = 3, Name = "Enchantment" },
                        new { Id = 4, Name = "Instant" },
                        new { Id = 5, Name = "Land" },
                        new { Id = 6, Name = "Planeswalker" },
                        new { Id = 7, Name = "Scheme" },
                        new { Id = 8, Name = "Sorcery" }
                    );
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.CardColor", b =>
                {
                    b.HasOne("RocketInfusedChicken.Database.Model.Card", "Card")
                        .WithMany("CardColors")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RocketInfusedChicken.Database.Model.Color", "Color")
                        .WithMany("CardColors")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.CardSpellSubType", b =>
                {
                    b.HasOne("RocketInfusedChicken.Database.Model.Card", "Card")
                        .WithMany("SubTypes")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RocketInfusedChicken.Database.Model.SpellSubType", "SpellSubType")
                        .WithMany("CardSubTypes")
                        .HasForeignKey("SpellSubTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.CardSpellSuperType", b =>
                {
                    b.HasOne("RocketInfusedChicken.Database.Model.Card", "Card")
                        .WithMany("SuperTypes")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RocketInfusedChicken.Database.Model.SpellSuperType", "SpellSuperType")
                        .WithMany("CardSuperTypes")
                        .HasForeignKey("SpellSuperTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.CardSpellType", b =>
                {
                    b.HasOne("RocketInfusedChicken.Database.Model.Card", "Card")
                        .WithMany("Types")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RocketInfusedChicken.Database.Model.SpellType", "SpellType")
                        .WithMany("CardTypes")
                        .HasForeignKey("SpellTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RocketInfusedChicken.Database.Model.Printing", b =>
                {
                    b.HasOne("RocketInfusedChicken.Database.Model.Card", "Card")
                        .WithMany("Printings")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RocketInfusedChicken.Database.Model.Set", "Set")
                        .WithMany("Printings")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
